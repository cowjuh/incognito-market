// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields:[userId], references:[id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique@map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields:[userId], references:[id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  shops         Shop[]
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum SocialMediaName {
  INSTAGRAM
  TWITTER
  FACEBOOK
  TIKTOK
  DEPOP
}

model SocialMedia {
  id      String         @id @default(cuid())
  name    SocialMediaName
  link    String
  shopId  String
  shop    Shop           @relation(fields: [shopId], references: [id])
}

model FeaturedItem {
  id          String   @id @default(cuid())
  images      Json     // Array of image URLs
  link        String
  description String?
  price       Float
  cta         String?  // Call To Action field
  shopId      String
  shop        Shop     @relation(fields: [shopId], references: [id])
}

model Update {
  id          String    @id @default(cuid())
  title       String
  content     String
  postedAt    DateTime  @default(now())

  shopId      String?
  shop        Shop?     @relation(fields: [shopId], references: [id])
  @@index([shopId])
}

model Shop {
  id              String    @id @default(cuid())
  name            String
  username        String    @unique
  email           String
  phoneNumber     String
  ownerId         String
  websiteLink     String?
  bio             String?
  description     String?
  physicalAddress String?
  country         String?
  state           String?
  city            String?
  profilePicture  String?
  headerImage     String?
  owner           User          @relation(fields: [ownerId], references: [id])
  socialMedia     SocialMedia[]
  featuredItems   FeaturedItem[]
  updates         Update[]
}