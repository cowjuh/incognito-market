// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields:[userId], references:[id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique@map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields:[userId], references:[id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  shops         Shop[]
  ratings     Rating[]
  followedShops ShopFollow[]
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum SocialMediaName {
  INSTAGRAM
  TWITTER
  FACEBOOK
  TIKTOK
  DEPOP
}

model SocialMedia {
  id      String         @id @default(cuid())
  name    SocialMediaName
  link    String
  shopId  String
  shop    Shop           @relation(fields: [shopId], references: [id])
}

model FeaturedItem {
  id          String   @id @default(cuid())
  images      Json     // Array of image URLs
  link        String
  description String?
  price       Float
  cta         String?  // Call To Action field
  shopId      String
  shop        Shop     @relation(fields: [shopId], references: [id])
}

model Update {
  id          String    @id @default(cuid())
  title       String
  content     String
  postedAt    DateTime  @default(now())
  callToActionText String?
  callToActionLink String?

  shopId      String?
  shop        Shop?     @relation(fields: [shopId], references: [id])
  @@index([shopId])
}

model TagType {
  id      String   @id @default(cuid())
  name    String   @unique
  tags    Tag[]
}

model Tag {
  id      String   @id @default(cuid())
  name    String   @unique
  shops   ShopTag[]
  tagTypeId String?
  tagType TagType? @relation(fields: [tagTypeId], references: [id])
}

model ShopTag {
  tagId   String
  shopId  String
  tag     Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)
  shop    Shop   @relation(fields: [shopId], references: [id], onDelete: Cascade)

  @@id([tagId, shopId])
}

model Shop {
  id              String    @id @default(cuid())
  name            String
  username        String    @unique
  email           String
  phoneNumber     String
  ownerId         String
  websiteLink     String?
  bio             String?
  description     String?
  physicalAddress String?
  country         String?
  state           String?
  city            String?
  profilePicture  String?
  headerImage     String?
  averageRating   Float?
  numberOfRatings Int?
  followersCount  Int       @default(0)
  owner           User          @relation(fields: [ownerId], references: [id])
  socialMedia     SocialMedia[]
  featuredItems   FeaturedItem[]
  updates         Update[]
  ratings         Rating[]
  shopTags        ShopTag[]
  followers       ShopFollow[]
}

model Rating {
  id          String   @id @default(cuid())
  score       Int      // Rating out of a predefined scale, e.g., 1-5
  comment     String?
  userId      String   @map("user_id")
  shopId      String   @map("shop_id")
  createdAt   DateTime @default(now())

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  shop        Shop     @relation(fields: [shopId], references: [id], onDelete: Cascade)

  @@index([userId, shopId])
}

model ShopFollow {
  userId  String
  shopId  String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  shop    Shop   @relation(fields: [shopId], references: [id], onDelete: Cascade)

  @@id([userId, shopId])
}